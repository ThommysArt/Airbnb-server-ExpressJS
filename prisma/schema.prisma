// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/test.db"
}

model User {
  id             Int             @id @default(autoincrement())
  authCode       String
  createdAt      DateTime        @default(now())
  hosts          Host[]
  payments       Payment[]
  listingReviews ListingReview[]
}

model Host {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  listings Listing[]
}

model Listing {
  id          Int              @id @default(autoincrement())
  title       String
  date        DateTime         @default(now())
  description String
  location    String
  price       Float
  host        Host             @relation(fields: [hostId], references: [id])
  hostId      Int
  amenities   ListingAmenity[]
  images      ListingImage[]
  reviews     ListingReview[]
  bookings    Booking[]
  Payment     Payment[]
}

model ListingAmenity {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  listing     Listing @relation(fields: [listingId], references: [id])
  listingId   Int
}

model ListingImage {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int
  url       String
}

model ListingReview {
  id        Int     @id @default(autoincrement())
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String?
}

model Payment {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  listing   Listing   @relation(fields: [listingId], references: [id])
  listingId Int
  date      DateTime  @default(now())
  method    String
  Booking   Booking[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  listing      Listing  @relation(fields: [listingId], references: [id])
  listingId    Int
  payment      Payment  @relation(fields: [paymentId], references: [id])
  paymentId    Int
  checkInDate  DateTime
  checkOutDate DateTime
}
